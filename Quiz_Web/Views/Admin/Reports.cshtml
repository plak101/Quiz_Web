@model dynamic
@{
    ViewData["Title"] = "Reports & Analytics";
    Layout = "_LayoutAdmin";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Reports & Analytics</h2>
    <div class="btn-group">
        <button type="button" class="btn btn-success" onclick="exportToCSV()">
            <i class="bi bi-file-earmark-spreadsheet"></i> Xuất CSV
        </button>
        <button type="button" class="btn btn-primary" onclick="exportToExcel()">
            <i class="bi bi-file-earmark-excel"></i> Xuất Excel
        </button>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Recent Test Attempts</h5>
            </div>
            <div class="card-body">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Test</th>
                            <th>Score</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attempt in Model.RecentAttempts)
                        {
                            <tr>
                                <td>@attempt.User?.FullName</td>
                                <td>@attempt.Test?.Title</td>
                                <td>
                                    @if (attempt.Score.HasValue && attempt.MaxScore.HasValue)
                                    {
                                        <span>@attempt.Score/@attempt.MaxScore</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">In Progress</span>
                                    }
                                </td>
                                <td>@attempt.StartedAt.ToString("dd/MM HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Top Scores</h5>
            </div>
            <div class="card-body">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Test</th>
                            <th>Score</th>
                            <th>Percentage</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attempt in Model.TopScores)
                        {
                            <tr>
                                <td>@attempt.User?.FullName</td>
                                <td>@attempt.Test?.Title</td>
                                <td>@attempt.Score/@attempt.MaxScore</td>
                                <td>
                                    @if (attempt.Score.HasValue && attempt.MaxScore.HasValue && attempt.MaxScore > 0)
                                    {
                                        var percentage = (attempt.Score.Value / attempt.MaxScore.Value) * 100;
                                        <span class="badge @(percentage >= 80 ? "bg-success" : percentage >= 60 ? "bg-warning" : "bg-danger")">
                                            @percentage.ToString("F1")%
                                        </span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        function exportToCSV() {
            const tables = document.querySelectorAll('table');
            let csvContent = '';
            
            tables.forEach((table, index) => {
                const title = table.closest('.card').querySelector('.card-header h5').textContent;
                csvContent += title + '\n';
                
                const rows = table.querySelectorAll('tr');
                rows.forEach(row => {
                    const cols = row.querySelectorAll('th, td');
                    const rowData = Array.from(cols).map(col => col.textContent.trim()).join(',');
                    csvContent += rowData + '\n';
                });
                csvContent += '\n';
            });
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'reports_' + new Date().toISOString().split('T')[0] + '.csv';
            link.click();
        }
        
        function exportToExcel() {
            const wb = XLSX.utils.book_new();
            const tables = document.querySelectorAll('table');
            
            tables.forEach((table, index) => {
                const title = table.closest('.card').querySelector('.card-header h5').textContent;
                const ws = XLSX.utils.table_to_sheet(table);
                XLSX.utils.book_append_sheet(wb, ws, title.substring(0, 31));
            });
            
            XLSX.writeFile(wb, 'reports_' + new Date().toISOString().split('T')[0] + '.xlsx');
        }
    </script>
}