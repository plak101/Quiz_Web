// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz_Web.Models.EF;

#nullable disable

namespace Quiz_Web.Migrations
{
    [DbContext(typeof(LearningPlatformContext))]
    partial class LearningPlatformContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quiz_Web.Models.Entities.AttemptAnswer", b =>
                {
                    b.Property<int>("AttemptAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptAnswerId"));

                    b.Property<string>("AnswerPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int");

                    b.Property<bool>("AutoGraded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GraderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("AttemptAnswerId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("GraderId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AttemptAnswers");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("After")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Before")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Certificate", b =>
                {
                    b.Property<int>("CertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CertId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "VerifyCode" }, "UQ_Certificates_Verify")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassId");

                    b.HasIndex("TeacherId");

                    b.HasIndex(new[] { "Code" }, "UQ_Classes_Code")
                        .IsUnique();

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ClassAnnouncement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime?>("PinUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassAnnouncements");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ClassAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int?>("AttemptsAllowed")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GradingPolicy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassAssignments");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ClassStudent", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("ClassId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassStudents");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ContentShare", b =>
                {
                    b.Property<int>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShareId"));

                    b.Property<bool>("CanAssign")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ShareId");

                    b.ToTable("ContentShares");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ContentTag", b =>
                {
                    b.Property<int>("ContentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentTagId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ContentTagId");

                    b.HasIndex("TagId");

                    b.ToTable("ContentTags");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CoverUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("VND");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("OwnerId");

                    b.HasIndex(new[] { "Slug" }, "UQ_Courses_Slug")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CourseContent", b =>
                {
                    b.Property<int>("CourseContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseContentId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("bit");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("TitleOverride")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CourseContentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectionId");

                    b.ToTable("CourseContents");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CoursePurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("PurchasedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PurchaseId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursePurchases");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CourseSection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SectionId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSections");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ErrorLog", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorId"));

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Stack")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ErrorId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("DurationSec")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Flashcard", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<int?>("BackMediaId")
                        .HasColumnType("int");

                    b.Property<string>("BackText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("FrontMediaId")
                        .HasColumnType("int");

                    b.Property<string>("FrontText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CardId");

                    b.HasIndex("BackMediaId");

                    b.HasIndex("FrontMediaId");

                    b.HasIndex("SetId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.FlashcardPracticeLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EaseFactor")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int?>("NextIntervalDays")
                        .HasColumnType("int");

                    b.Property<int?>("QualityScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("CardId");

                    b.HasIndex("SetId");

                    b.HasIndex("UserId");

                    b.ToTable("FlashcardPracticeLogs");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.FlashcardSet", b =>
                {
                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetId"));

                    b.Property<string>("CoverUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("TagsText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("SetId");

                    b.HasIndex("OwnerId");

                    b.ToTable("FlashcardSets");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Folder", b =>
                {
                    b.Property<int>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolderId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.HasKey("FolderId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Invitation", b =>
                {
                    b.Property<int>("InviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InviteId"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InviterId")
                        .HasColumnType("int");

                    b.Property<string>("RoleSuggested")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InviteId");

                    b.HasIndex("ClassId");

                    b.HasIndex("InviterId");

                    b.HasIndex(new[] { "Token" }, "UQ_Invitations_Token")
                        .IsUnique();

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("LibraryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.NotificationChannel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChannelId"));

                    b.Property<string>("AddressOrToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationChannels");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ProviderRef")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<string>("RawPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PaymentId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<decimal>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(1m);

                    b.Property<int?>("StemMediaId")
                        .HasColumnType("int");

                    b.Property<string>("StemText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("QuestionId");

                    b.HasIndex("StemMediaId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.QuestionClozeBlank", b =>
                {
                    b.Property<int>("BlankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlankId"));

                    b.Property<string>("AcceptRegex")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("BlankIndex")
                        .HasColumnType("int");

                    b.Property<bool>("CaseSensitive")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("BlankId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionClozeBlanks");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.QuestionOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("OptionMediaId")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("OptionMediaId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.QuestionRangeAnswer", b =>
                {
                    b.Property<int>("RangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RangeId"));

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(12, 4)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(12, 4)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Tolerance")
                        .HasColumnType("decimal(12, 4)");

                    b.HasKey("RangeId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionRangeAnswers");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<int>("RelatedId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("TriggerAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReminderId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1AD711602B");

                    b.HasIndex(new[] { "Name" }, "UQ__Roles__737584F69379C895")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.SavedItem", b =>
                {
                    b.Property<int>("SavedItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SavedItemId"));

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("SavedItemId");

                    b.HasIndex("FolderId");

                    b.HasIndex("LibraryId");

                    b.ToTable("SavedItems");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<decimal?>("TotalScore")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.SubmissionItem", b =>
                {
                    b.Property<int>("SubmissionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionItemId"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("RefId")
                        .HasColumnType("int");

                    b.Property<string>("RefType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionItemId");

                    b.ToTable("SubmissionItems");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.HasIndex(new[] { "Name" }, "UQ_Tags_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Slug" }, "UQ_Tags_Slug")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradingMode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("ShuffleOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimitSec")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TestId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.TestAssignment", b =>
                {
                    b.Property<int>("TestAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestAssignId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("AttemptsAllowed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OverrideTimeLimitSec")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("TestAssignId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TestId");

                    b.ToTable("TestAssignments");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.TestAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSpentSec")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttemptId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestAttempts");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CCA2BF316");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534076DC7DC")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly?>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GradeLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Locale")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("EmailOptIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("PushOptIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TimeZone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UiTheme")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.AttemptAnswer", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.TestAttempt", "Attempt")
                        .WithMany("AttemptAnswers")
                        .HasForeignKey("AttemptId")
                        .IsRequired()
                        .HasConstraintName("FK_AAnswers_Attempt");

                    b.HasOne("Quiz_Web.Models.Entities.User", "Grader")
                        .WithMany("AttemptAnswers")
                        .HasForeignKey("GraderId")
                        .HasConstraintName("FK_AAnswers_Grader");

                    b.HasOne("Quiz_Web.Models.Entities.Question", "Question")
                        .WithMany("AttemptAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AAnswers_Question");

                    b.Navigation("Attempt");

                    b.Navigation("Grader");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.AuditLog", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AuditLogs_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Certificate", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Certificates_Course");

                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Certificates_User");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Class", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Classes_Teacher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ClassAnnouncement", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Author")
                        .WithMany("ClassAnnouncements")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_CAnnouncements_Author");

                    b.HasOne("Quiz_Web.Models.Entities.Class", "Class")
                        .WithMany("ClassAnnouncements")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_CAnnouncements_Class");

                    b.Navigation("Author");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ClassAssignment", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Class", "Class")
                        .WithMany("ClassAssignments")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_CAssignments_Class");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ClassStudent", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Class", "Class")
                        .WithMany("ClassStudents")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassStudents_Class");

                    b.HasOne("Quiz_Web.Models.Entities.User", "Student")
                        .WithMany("ClassStudents")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassStudents_Student");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ContentTag", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Tag", "Tag")
                        .WithMany("ContentTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_ContentTags_Tag");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Course", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Owner")
                        .WithMany("Courses")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CourseContent", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Course", "Course")
                        .WithMany("CourseContents")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CContents_Course");

                    b.HasOne("Quiz_Web.Models.Entities.CourseSection", "Section")
                        .WithMany("CourseContents")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_CContents_Section");

                    b.Navigation("Course");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CoursePurchase", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Buyer")
                        .WithMany("CoursePurchases")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_CPurchases_Buyer");

                    b.HasOne("Quiz_Web.Models.Entities.Course", "Course")
                        .WithMany("CoursePurchases")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CPurchases_Course");

                    b.Navigation("Buyer");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CourseSection", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Course", "Course")
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CSections_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.File", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Owner")
                        .WithMany("Files")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Files_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Flashcard", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.File", "BackMedia")
                        .WithMany("FlashcardBackMedia")
                        .HasForeignKey("BackMediaId")
                        .HasConstraintName("FK_Flashcards_BackMedia");

                    b.HasOne("Quiz_Web.Models.Entities.File", "FrontMedia")
                        .WithMany("FlashcardFrontMedia")
                        .HasForeignKey("FrontMediaId")
                        .HasConstraintName("FK_Flashcards_FrontMedia");

                    b.HasOne("Quiz_Web.Models.Entities.FlashcardSet", "Set")
                        .WithMany("Flashcards")
                        .HasForeignKey("SetId")
                        .IsRequired()
                        .HasConstraintName("FK_Flashcards_Set");

                    b.Navigation("BackMedia");

                    b.Navigation("FrontMedia");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.FlashcardPracticeLog", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Flashcard", "Card")
                        .WithMany("FlashcardPracticeLogs")
                        .HasForeignKey("CardId")
                        .IsRequired()
                        .HasConstraintName("FK_FPL_Card");

                    b.HasOne("Quiz_Web.Models.Entities.FlashcardSet", "Set")
                        .WithMany("FlashcardPracticeLogs")
                        .HasForeignKey("SetId")
                        .IsRequired()
                        .HasConstraintName("FK_FPL_Set");

                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithMany("FlashcardPracticeLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FPL_User");

                    b.Navigation("Card");

                    b.Navigation("Set");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.FlashcardSet", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Owner")
                        .WithMany("FlashcardSets")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_FlashcardSets_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Folder", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Library", "Library")
                        .WithMany("Folders")
                        .HasForeignKey("LibraryId")
                        .IsRequired()
                        .HasConstraintName("FK_Folders_Library");

                    b.HasOne("Quiz_Web.Models.Entities.Folder", "ParentFolder")
                        .WithMany("InverseParentFolder")
                        .HasForeignKey("ParentFolderId")
                        .HasConstraintName("FK_Folders_Parent");

                    b.Navigation("Library");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Invitation", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Class", "Class")
                        .WithMany("Invitations")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Invitations_Class");

                    b.HasOne("Quiz_Web.Models.Entities.User", "Inviter")
                        .WithMany("Invitations")
                        .HasForeignKey("InviterId")
                        .IsRequired()
                        .HasConstraintName("FK_Invitations_Inviter");

                    b.Navigation("Class");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Lesson", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Owner")
                        .WithMany("Lessons")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Library", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Owner")
                        .WithMany("Libraries")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Libraries_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Notification", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.NotificationChannel", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithMany("NotificationChannels")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_NChannels_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Payment", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.CoursePurchase", "Purchase")
                        .WithMany("Payments")
                        .HasForeignKey("PurchaseId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Purchase");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Question", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.File", "StemMedia")
                        .WithMany("Questions")
                        .HasForeignKey("StemMediaId")
                        .HasConstraintName("FK_Questions_StemMedia");

                    b.HasOne("Quiz_Web.Models.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_Test");

                    b.Navigation("StemMedia");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.QuestionClozeBlank", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Question", "Question")
                        .WithMany("QuestionClozeBlanks")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QCloze_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.QuestionOption", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.File", "OptionMedia")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("OptionMediaId")
                        .HasConstraintName("FK_QOptions_Media");

                    b.HasOne("Quiz_Web.Models.Entities.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QOptions_Question");

                    b.Navigation("OptionMedia");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.QuestionRangeAnswer", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Question", "Question")
                        .WithMany("QuestionRangeAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QRange_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Reminder", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reminders_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.SavedItem", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Folder", "Folder")
                        .WithMany("SavedItems")
                        .HasForeignKey("FolderId")
                        .HasConstraintName("FK_SavedItems_Folder");

                    b.HasOne("Quiz_Web.Models.Entities.Library", "Library")
                        .WithMany("SavedItems")
                        .HasForeignKey("LibraryId")
                        .IsRequired()
                        .HasConstraintName("FK_SavedItems_Library");

                    b.Navigation("Folder");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Test", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "Owner")
                        .WithMany("Tests")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Tests_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.TestAssignment", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.ClassAssignment", "Assignment")
                        .WithMany("TestAssignments")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK_TAssign_Assignment");

                    b.HasOne("Quiz_Web.Models.Entities.Test", "Test")
                        .WithMany("TestAssignments")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_TAssign_Test");

                    b.Navigation("Assignment");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.TestAttempt", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Test", "Test")
                        .WithMany("TestAttempts")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_Attempts_Test");

                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithMany("TestAttempts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Attempts_User");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.User", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleId__3D5E1FD2");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.UserProfile", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Quiz_Web.Models.Entities.UserProfile", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfiles_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.UserSetting", b =>
                {
                    b.HasOne("Quiz_Web.Models.Entities.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("Quiz_Web.Models.Entities.UserSetting", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSettings_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Class", b =>
                {
                    b.Navigation("ClassAnnouncements");

                    b.Navigation("ClassAssignments");

                    b.Navigation("ClassStudents");

                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.ClassAssignment", b =>
                {
                    b.Navigation("TestAssignments");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Course", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CourseContents");

                    b.Navigation("CoursePurchases");

                    b.Navigation("CourseSections");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CoursePurchase", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.CourseSection", b =>
                {
                    b.Navigation("CourseContents");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.File", b =>
                {
                    b.Navigation("FlashcardBackMedia");

                    b.Navigation("FlashcardFrontMedia");

                    b.Navigation("QuestionOptions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Flashcard", b =>
                {
                    b.Navigation("FlashcardPracticeLogs");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.FlashcardSet", b =>
                {
                    b.Navigation("FlashcardPracticeLogs");

                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Folder", b =>
                {
                    b.Navigation("InverseParentFolder");

                    b.Navigation("SavedItems");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Library", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("SavedItems");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Question", b =>
                {
                    b.Navigation("AttemptAnswers");

                    b.Navigation("QuestionClozeBlanks");

                    b.Navigation("QuestionOptions");

                    b.Navigation("QuestionRangeAnswers");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Tag", b =>
                {
                    b.Navigation("ContentTags");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestAssignments");

                    b.Navigation("TestAttempts");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.TestAttempt", b =>
                {
                    b.Navigation("AttemptAnswers");
                });

            modelBuilder.Entity("Quiz_Web.Models.Entities.User", b =>
                {
                    b.Navigation("AttemptAnswers");

                    b.Navigation("AuditLogs");

                    b.Navigation("Certificates");

                    b.Navigation("ClassAnnouncements");

                    b.Navigation("ClassStudents");

                    b.Navigation("Classes");

                    b.Navigation("CoursePurchases");

                    b.Navigation("Courses");

                    b.Navigation("Files");

                    b.Navigation("FlashcardPracticeLogs");

                    b.Navigation("FlashcardSets");

                    b.Navigation("Invitations");

                    b.Navigation("Lessons");

                    b.Navigation("Libraries");

                    b.Navigation("NotificationChannels");

                    b.Navigation("Notifications");

                    b.Navigation("Reminders");

                    b.Navigation("TestAttempts");

                    b.Navigation("Tests");

                    b.Navigation("UserProfile");

                    b.Navigation("UserSetting");
                });
#pragma warning restore 612, 618
        }
    }
}
